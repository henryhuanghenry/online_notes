import{_ as l,r as c,o as i,c as u,a as n,d as a,w as p,b as s,e as o}from"./app.6738de7d.js";var r="/online_notes/assets/image-20220627213931105.24a6d2b2.png";const d={},k=n("h1",{id:"\u56DE\u6EAF\u6CD5\u5B66\u4E60",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u56DE\u6EAF\u6CD5\u5B66\u4E60","aria-hidden":"true"},"#"),s(" \u56DE\u6EAF\u6CD5\u5B66\u4E60")],-1),m=s("\u6B64\u5904\u975E\u5E38\u611F\u8C22"),v={href:"https://vuepress-theme-hope.github.io/v2/md-enhance/zh/",target:"_blank",rel:"noopener noreferrer"},b=s("\u63D2\u4EF6"),h=s("\u63D0\u4F9B\u7684\u5BF9vuepress-next\u7684\u516C\u5F0F\u652F\u6301\uFF01"),_={class:"table-of-contents"},f=s("\u56DE\u6EAF\u6CD5\u57FA\u7840"),y=s("\u9898\u76EE\u6F14\u7EC3\uFF1A\u7EC4\u5408\u6570\u5B66"),x=s("46.\u5168\u6392\u5217"),w=s("47.\u5168\u6392\u5217II"),g=o('<h2 id="\u56DE\u6EAF\u6CD5\u57FA\u7840" tabindex="-1"><a class="header-anchor" href="#\u56DE\u6EAF\u6CD5\u57FA\u7840" aria-hidden="true">#</a> \u56DE\u6EAF\u6CD5\u57FA\u7840</h2><h2 id="\u9898\u76EE\u6F14\u7EC3-\u7EC4\u5408\u6570\u5B66" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u6F14\u7EC3-\u7EC4\u5408\u6570\u5B66" aria-hidden="true">#</a> \u9898\u76EE\u6F14\u7EC3\uFF1A\u7EC4\u5408\u6570\u5B66</h2><h3 id="_46-\u5168\u6392\u5217" tabindex="-1"><a class="header-anchor" href="#_46-\u5168\u6392\u5217" aria-hidden="true">#</a> 46.\u5168\u6392\u5217</h3>',3),S={href:"https://leetcode.cn/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},L=s("\u4F20\u9001\u95E8"),q={href:"https://leetcode.cn/problems/permutations/solution/hui-su-suan-fa-python-dai-ma-java-dai-ma-by-liweiw/",target:"_blank",rel:"noopener noreferrer"},D=s("\u65E0\u654C\u53C2\u8003\u9898\u89E3"),F=n("li",null,[s("\u56DE\u6EAF\u6CD5\u6709\u4E2A\u6838\u5FC3\u662F\u9700\u8981\u7528\u53D8\u91CF\u4FDD\u5B58"),n("strong",null,"\u6211\u5F53\u524D\u627E\u8FC7\u4EC0\u4E48"),s("\uFF0C\u5BF9\u5E94\u4E8E\u8FD9\u4E00\u9898\u5C31\u662Fpath")],-1),j=n("li",null,[s("\u6240\u4EE5\uFF0C\u5728\u9012\u5F52\u7684\u8FC7\u7A0B\u4E2D\uFF0C "),n("ul",null,[n("li",null,"\u8FDB\u5165\u9012\u5F52\u524D\uFF0C\u628A\u5F53\u524D\u5DF2\u7ECF\u63A2\u7D22\u7684\u52A0\u4E0A"),n("li",null,"\u9012\u5F52\u51FA\u6765\u540E\uFF0C\u628A\u4E0A\u6B21\u63A2\u7D22\u7684\u9664\u6389")])],-1),I=n("li",null,"\u9012\u5F52\u51FD\u6570\u8981\u51B3\u5B9A\u4EC0\u4E48\u65F6\u5019return\uFF0C\u8FD9\u4E00\u9898\u5C31\u662F\u6CA1\u6709\u6570\u5B57\u53EF\u4EE5\u7EE7\u7EED\u53D6\u7684\u65F6\u5019return",-1),N=n("li",null,"\u6211\u4EEC\u9700\u8981used\u7684\u5E2E\u52A9\uFF0C\u6765\u4F7F\u5F97\u4E0B\u4E00\u6B21\u53D6\u4E0D\u4F1A\u53D6\u5230\u4E4B\u524D\u7528\u8FC7\u7684",-1),V=o(`<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> turtle <span class="token keyword">import</span> left
<span class="token keyword">from</span> typing <span class="token keyword">import</span> List

<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>style <span class="token keyword">import</span> use
<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> false

<span class="token comment"># # \u5982\u679C\u7701\u7565\u4E86used\u7684\u8BDD\uFF0C\u6BCF\u6B21\u67E5\u627E\u90FD\u8981\u904D\u5386\u4E00\u6B21path\uFF0C\u4F1A\u589E\u591A\u4E00\u6B21O\u7684\u65F6\u95F4\u590D\u6742\u5EA6</span>
<span class="token comment"># class Solution:</span>
<span class="token comment">#     def permute(self, nums: List[int]) -&gt; List[List[int]]:</span>
<span class="token comment">#         res = []  </span>
<span class="token comment">#         def DFS(res, path, nums):</span>
<span class="token comment">#             flag = 0</span>
<span class="token comment">#             for indexx in range(len(nums)):</span>
<span class="token comment">#                 if nums[indexx] not in path:</span>
<span class="token comment">#                     path.append(nums[indexx]) #\u72B6\u6001\u52A0\u5165</span>
<span class="token comment">#                     DFS(res, path, nums) # DFS\u7EE7\u7EED</span>
<span class="token comment">#                     path.pop() #\u56DE\u9000</span>
<span class="token comment">#                     flag = 1</span>
<span class="token comment">#             if flag == 0:</span>
<span class="token comment">#                 res.append(path.copy()) # \u5982\u679C\u4E0Dcopy\u7684\u8BDD\uFF0Cpath\u56E0\u4E3A\u4F20\u7684\u662F\u5F15\u7528\uFF0C\u4E4B\u540E\u4F1A\u88AB\u6539\u6389</span>
<span class="token comment">#                 return </span>
<span class="token comment">#         path = [] # \u5B9A\u4E49\u8FD9\u4E2A\u72B6\u6001\u53D8\u91CF</span>
<span class="token comment">#         DFS(res, path, nums)    </span>
<span class="token comment">#         return res</span>
            
<span class="token comment"># \u4E0B\u9762\u8FD9\u4E2A\u662F\u6709used\u7684\u7248\u672C        </span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  
        <span class="token keyword">def</span> <span class="token function">DFS</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
            flag <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">for</span> indexx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    DFS<span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span>
                    path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                    flag <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> 
        used <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> nums<span class="token punctuation">]</span> <span class="token comment"># \u7528\u4E8E\u770B\u770B\u54EA\u4E9B\u7528\u4E86\uFF0C\u7528\u6765\u5BF9\u641C\u7D22\u7A7A\u95F4\u526A\u679D\u3002\u4E0D\u7136\u6211\u4EEC\u5DF2\u7ECF\u7528\u8FC72\u4E86\u540E\u9762\u8FD8\u75282\u5C31\u5F88\u9EBB\u70E6\u3002</span>
        path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        DFS<span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span>    
        <span class="token keyword">return</span> res        

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> solution<span class="token punctuation">.</span>permute<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_47-\u5168\u6392\u5217ii" tabindex="-1"><a class="header-anchor" href="#_47-\u5168\u6392\u5217ii" aria-hidden="true">#</a> 47.\u5168\u6392\u5217II</h3>`,2),B={href:"https://leetcode.cn/problems/permutations-ii/",target:"_blank",rel:"noopener noreferrer"},E=s("\u4F20\u9001\u95E8"),z=o('<ul><li>\u753B\u56FE\u89E3\u91CA\u5982\u4F55\u5904\u7406\u591A\u4E2A\u6570\uFF1A <ul><li>\u9996\u5148\uFF0C\u591A\u4E2A\u76F8\u540C\u7684\u6570\u5B57\u5728\u6392\u5217\u4E2D\u662F\u53EF\u4EE5\u591A\u6B21\u4F7F\u7528\u7684</li><li>\u4F46\u662F211\u548C211\u8FD9\u4E2A\u6392\u5217\u662F\u91CD\u590D\u7684\uFF0C\u5982\u4F55\u907F\u514D\uFF1F</li><li><img src="'+r+`" alt="image-20220627213931105" style="zoom:80%;"></li></ul></li><li>\u7684</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type nums: List[int]
        :rtype: List[List[int]]
        &quot;&quot;&quot;</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  
        <span class="token keyword">def</span> <span class="token function">DFS</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
            flag <span class="token operator">=</span> <span class="token number">0</span>
            layer_used <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span> j <span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
            <span class="token comment"># \u753B\u56FE\u5C31\u53EF\u4EE5\u77E5\u9053\uFF0C\u5BF9\u4E8E\u6BCF\u4E00\u5C42\uFF0C\u5982\u679C\u60F3\u7528\u7684\u5143\u7D20\u548C\u5F00\u5934\u7684\u5143\u7D20\u76F8\u7B49\uFF0C\u90A3\u4E0D\u7528\u60F3\uFF0C\u80AF\u5B9A\u5DF2\u7ECF\u5728\u4E4B\u524D\u63A2\u7D22\u8FC7\u4E86</span>
            <span class="token comment"># \u6240\u4EE5\u6211\u4EEC\u53EF\u4EE5\u7528layer_used\u6765\u4FDD\u5B58\u6BCF\u4E00\u5C42\u7684\u63A2\u7D22\u5DF2\u7ECF\u7528\u8FC7\u7684\u90A3\u4E9B\u5143\u7D20\uFF0C\u4E4B\u540E\u5C31\u53EF\u4EE5\u4E0D\u7528\u518D\u53BB\u63A2\u7D22\u4E86</span>
            <span class="token keyword">for</span> indexx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>used<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> layer_used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                    layer_used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    DFS<span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span>
                    path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
                    used<span class="token punctuation">[</span>indexx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
                    flag <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> 
        used <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">0</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> nums<span class="token punctuation">]</span> <span class="token comment"># \u7528\u4E8E\u770B\u770B\u54EA\u4E9B\u7528\u4E86</span>
        path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        DFS<span class="token punctuation">(</span>res<span class="token punctuation">,</span> path<span class="token punctuation">,</span> used<span class="token punctuation">,</span> nums<span class="token punctuation">)</span>    
        <span class="token keyword">return</span> res        

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> solution<span class="token punctuation">.</span>permuteUnique<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function C(R,U){const t=c("ExternalLinkIcon"),e=c("RouterLink");return i(),u("div",null,[k,n("ul",null,[n("li",null,[m,n("a",v,[b,a(t)]),h])]),n("nav",_,[n("ul",null,[n("li",null,[a(e,{to:"#\u56DE\u6EAF\u6CD5\u57FA\u7840"},{default:p(()=>[f]),_:1})]),n("li",null,[a(e,{to:"#\u9898\u76EE\u6F14\u7EC3-\u7EC4\u5408\u6570\u5B66"},{default:p(()=>[y]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_46-\u5168\u6392\u5217"},{default:p(()=>[x]),_:1})]),n("li",null,[a(e,{to:"#_47-\u5168\u6392\u5217ii"},{default:p(()=>[w]),_:1})])])])])]),g,n("p",null,[n("a",S,[L,a(t)])]),n("ul",null,[n("li",null,[n("a",q,[D,a(t)])]),F,j,I,N]),V,n("p",null,[n("a",B,[E,a(t)])]),z])}var T=l(d,[["render",C],["__file","\u56DE\u6EAF\u7B97\u6CD5.html.vue"]]);export{T as default};
