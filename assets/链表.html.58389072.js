import{_ as e,r as o,o as l,c,a as n,d as t,w as p,b as s,e as i}from"./app.6738de7d.js";const u={},k=n("h1",{id:"\u94FE\u8868",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u94FE\u8868","aria-hidden":"true"},"#"),s(" \u94FE\u8868")],-1),r={class:"table-of-contents"},d=s("\u9898\u76EE\u7EC3\u4E60"),v=s("25. K\u4E2A\u4E00\u7EC4\u7FFB\u8F6C\u94FE\u8868"),b=i(`<h2 id="\u9898\u76EE\u7EC3\u4E60" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u7EC3\u4E60" aria-hidden="true">#</a> \u9898\u76EE\u7EC3\u4E60</h2><h3 id="_25-k\u4E2A\u4E00\u7EC4\u7FFB\u8F6C\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#_25-k\u4E2A\u4E00\u7EC4\u7FFB\u8F6C\u94FE\u8868" aria-hidden="true">#</a> 25. K\u4E2A\u4E00\u7EC4\u7FFB\u8F6C\u94FE\u8868</h3><ul><li><p>\u8BBE\u8BA1\u4E86\u4E00\u4E2A\u9012\u5F52</p></li><li><p>\u8F93\u5165\u5F53\u524D\u8981\u904D\u5386\u7684node\uFF0C\u8FD9\u662F\u7B2C\u51E0\u6B21\u904D\u5386count\uFF0C\u4EE5\u53CAK</p></li><li><p>\u9012\u5F52\u7684\u8FD4\u56DE\u662F\uFF0C\u4E0B\u4E00\u7EC4\u7684\u5934\uFF0C\u5F53\u524D\u7684\u5C3E\u5DF4\uFF0C\u5F53\u524D\u8FD9\u4E00\u7EC4\u7684\u65B0\u5934(\u5373\u7B2CK\u4E2A\u7ED3\u70B9)</p></li><li><p>\u5BF9\u4E8E\u51FD\u6570\u8FD4\u56DE\u540E\u7684\u64CD\u4F5C\u6765\u8BF4\uFF0C\u4E0A\u9762\u8BF4\u7684\u5F53\u524D\u7684\u5C3E\u5DF4\uFF0C\u5C31\u8981\u63A5\u4E0A\u5F53\u524D\u8FD9\u4E2A\u7ED3\u70B9</p></li><li><p>\u5982\u679C\u8FD4\u56DE\u5230\u5F00\u5934\uFF0C\u4E5F\u5C31\u662F\u7B2C\u4E00\u6B21\u53D8\u904D\u5386\u7684\u65F6\u5019\uFF0C\u5F53\u524D\u7684\u5C3E\u5DF4\u63A5\u4E0A\u5F53\u524D\u7684\u7ED3\u70B9\uFF0C\u5F53\u524D\u7684\u7ED3\u70B9\u8981\u63A5\u4E0A\u4E0B\u4E00\u7EC4\u7684\u5934\u3002\u540C\u65F6\uFF0C\u6211\u4EEC\u8981\u8FD4\u56DE (\u4E0B\u4E00\u7EC4\u7684\u5934\uFF0C\u5F53\u524D\u7684\u8FD9\u4E2A\u7ED3\u70B9\u6210\u4E3A\u5C3E\u5DF4\uFF0C\u8FD9\u4E00\u7EC4\u7684\u65B0\u5934)</p></li><li><p>\u6CE8\u610F\u5230\uFF0C\u6CA1\u6709\u4E1C\u897F\u94FE\u63A5\u65B0\u5934\uFF0C\u94FE\u63A5\u65B0\u5934\u7684\u662F\u4E0A\u4E00\u7EC4\u7684\u5C3E\u5DF4\uFF0C\u56E0\u6B64\u6211\u4EEC\u8981\u4FDD\u5B58\u4E0A\u4E00\u7EC4\u7684\u5C3E\u5DF4\uFF0C\u94FE\u63A5\u8FD9\u4E00\u7EC4\u7684\u5934</p></li><li><p>\u540C\u65F6\uFF0C\u8981\u5904\u7406\u904D\u5386\u4E0D\u5230K\u4E2A\u7ED3\u70B9\u5C31\u7ED3\u675F\u7684\u884C\u4E3A\uFF0C\u6211\u4EEC\u8FD4\u56DE\u542B\u6709(3\u4E2ANone)\u7684\u5143\u7EC4\uFF0C\u8868\u793A\u4E0D\u5230K\u4E2A\u7ED3\u675F</p></li><li><p>\u5728\u8FD4\u56DE\u5230\u8BE5\u7EC4\u539F\u59CB\u7B2C\u4E00\u4E2A\u7ED3\u70B9\u7684\u65F6\u5019\uFF0C\u65B0\u7684\u5934\u8FD8\u662F\u539F\u672C\u7684\u5934\uFF0C\u540C\u65F6\u8FD4\u56DE\u4E00\u4E9B\u53D8\u91CF\u544A\u77E5\u6CA1\u6709\u904D\u5386\u7ED3\u675F\uFF0C\u6574\u4E2A\u5927\u7A0B\u5E8F\u7ED3\u675F</p></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>
<span class="token keyword">class</span> <span class="token class-name">List_Node</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        &quot;&quot;&quot;</span>
        <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> count<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># \u8FD4\u56DE(\u4E0B\u4E00\u4E2A\u94FE\u8868\u7684\u5934\uFF0C\u5F53\u524D\u7684\u5C3E\u5DF4\uFF0C\u5F53\u524D\u94FE\u8868\u7684\u65B0\u5934)</span>
            <span class="token keyword">if</span> head <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> count <span class="token operator">==</span> k <span class="token keyword">and</span> head<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> head<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token punctuation">(</span>last<span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token punctuation">,</span> new_head<span class="token punctuation">)</span> <span class="token operator">=</span> reverse<span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">,</span> count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>
                <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> last <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> <span class="token builtin">next</span> <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> new_head <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        <span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
                        head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> last
                        <span class="token keyword">return</span> <span class="token punctuation">(</span>last<span class="token punctuation">,</span> head<span class="token punctuation">,</span> new_head<span class="token punctuation">)</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> last <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> <span class="token builtin">next</span> <span class="token operator">==</span> <span class="token boolean">None</span> <span class="token keyword">and</span> new_head <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        <span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
                        <span class="token keyword">return</span> <span class="token punctuation">(</span>last<span class="token punctuation">,</span> head<span class="token punctuation">,</span> new_head<span class="token punctuation">)</span>
        <span class="token punctuation">(</span>last<span class="token punctuation">,</span> tail<span class="token punctuation">,</span> new_head<span class="token punctuation">)</span> <span class="token operator">=</span> reverse<span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>
        res <span class="token operator">=</span> new_head
        <span class="token keyword">while</span><span class="token punctuation">(</span>last<span class="token operator">!=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token punctuation">(</span>last<span class="token punctuation">,</span> tail2<span class="token punctuation">,</span> new_head<span class="token punctuation">)</span> <span class="token operator">=</span> reverse<span class="token punctuation">(</span>last<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span>
            tail<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> new_head
            tail <span class="token operator">=</span> tail2
        <span class="token keyword">return</span> res

<span class="token keyword">def</span> <span class="token function">build_list</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    root <span class="token operator">=</span> List_Node<span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    tmp <span class="token operator">=</span> root
    <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        tmp<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> List_Node<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
        tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token builtin">next</span>
    <span class="token keyword">return</span> root

<span class="token keyword">def</span> <span class="token function">print_list</span><span class="token punctuation">(</span>listt<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>listt<span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>listt<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
        listt <span class="token operator">=</span> listt<span class="token punctuation">.</span><span class="token builtin">next</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
    listt <span class="token operator">=</span> build_list<span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    solution <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> solution<span class="token punctuation">.</span>reverseKGroup<span class="token punctuation">(</span>listt<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    print_list<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function m(_,h){const a=o("RouterLink");return l(),c("div",null,[k,n("nav",r,[n("ul",null,[n("li",null,[t(a,{to:"#\u9898\u76EE\u7EC3\u4E60"},{default:p(()=>[d]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_25-k\u4E2A\u4E00\u7EC4\u7FFB\u8F6C\u94FE\u8868"},{default:p(()=>[v]),_:1})])])])])]),b])}var y=e(u,[["render",m],["__file","\u94FE\u8868.html.vue"]]);export{y as default};
